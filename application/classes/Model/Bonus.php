<?php defined('SYSPATH') or die('No direct script access.');

/**
Является основной таблицей хранения суммовых данных по бонусным картам. Описание полей.
1)     DEBKRED – возможные значений 0 и 1. 1 – операция начисления(прибавления) суммы по бонусной карте. 0 – операция списания(вычитание) суммы по бонусной карте. 
2)     ID – номер бонусной карты.
3)     DOC – номер документа. Соответствует номеру документа программы 1с(реквизит НомерДок).
4)     DATE – дата документа. Соотвествует дате документа программы 1с(реквизит ДатаДок)
5)     Active – возможные значений 0 и 1. 1 – запись активна, т.е. она учитывается при получении баланса по карте. 0 – запись неактивна, в балансе по бонусной карте не учитывется. Имеет смысл, т.к. при отмене проведения документов в программе 1с при обнулении бонусов начисленными этими документами в базе SQL, чтобы не удалять физически запись из базы(в целях безопастности и запрета оператора языка SQL DELETE) у записи выставляем признак активности записи 0.
6)     Keys – уникальный номер операции. Генерируется в программе 1с в глобальном модуле функцией ШтрихКодНакладной(Конт). Кодирует номер документа по определенному правилу в формат EAN13. Важно, что этот номер должен быть уникальным в рамках всех информационных баз в которых ведется учет бонусных карт. Поле является ключом для связи двух других таблиц. 
7)     sumBonus – сумма бонуса начисленного в рублях.
8)     Transaction – автоинкрементное поле. Генерирует уникальное число для записи(операции начисления или списания суммы бонуса). В дальнейшем может использоваться для проверки и идентификации операции в базе.
9)     Filial – префикс филиала. Берется из константы «ИдентСимвФилиала». Филиал где была произведена операция с бонусной картой.
10)     Operation – вид операции с бонусной картой. Возможные числовые значения:     
 Авноначисления бонусов по продажам(начисляется роботом):
    1 - add – наличный расчет(документы РасходнаяКасса и РасходнаяИнет), 
    2 – add_no_kesh- безнальный расчет, документ РасходнаяВТбн;
другие операции: 
    3 - write - списание бонуса при покупке товара документом расх.касса ,
    4 - add_derect - "Прямое зачисление"(деньги кладутся на счет карты), 
    5 - write_derect -"Прямое списание"(одним документом РасходнаяВт), 
    6 – clear_start - обнуление бонуса нальных продаж, 
    7 – clear -обнуление бонуса безнальных продаж.
    


Индексы таблицы: 
1. Индекс KEY. Служит для проверки уникальности записей. Считаем, что в базе не может быть одинаковых записей с одним номером бонусной карты, номером документа, даты документа и префиксом филиала.
     */

/**
* Модель бонусной карты
*/

class Model_Bonus extends ORM {

    protected $_table_name = 'BD_bonus';
    
    /**
    * INIT MSSQL
    */
    protected function _initialize()
	{
	   $this->_db_group = 'mssql';
       parent::_initialize();
	}
    
    /*
    * Unique key - Primarry key
    */
    protected $_primary_key = 'Keys';
    
    protected $_table_columns = array( 
    'DEBKRED' => NULL,
    'ID'  => NULL,
    'DOC'     => NULL,
    'DATE'   => NULL,
    'Active'   => NULL,
    'Keys'   => NULL,
    'sumBonus'   => NULL,
    //'Transaction'   => NULL,
    'Filial'   => NULL,
    'Operation'   => NULL,
    );
    
    
    /*protected $_has_many = array(
            'events' => array(
                'through' => 'cards_events'),
    );*/
    
    public function operation()
    {
        if($this->loaded())
        {
            if($this->Operation)
            {
               $operation = ORM::factory('Event_Type', intval($this->Operation));
               if($operation->loaded())
               {
                  return $operation->title;
               }   
            }
        }
        return FALSE;
    }
    
    /**
    * не используется 
    */
    public static function calculate($ball = NULL, $type, $result = NULL)
    {
        switch($type)
        {
            case 1:
                $result = $result + $ball;
            break;
            
            case 2:
                $result = $result + $ball;
            break;
            
            case 3:
                $result = $result + $ball;
            break;
            
            case 4:
                $result = $result + $ball;
            break;
            
            case 5:
                $result = $result - $ball;  
            break;
            
            case 6:
                //$result = 0;
            break;
            
            case 7:
                //$result = 0;
            break;
            
            default:
            break;
        }
        return $result;
    }
}
 